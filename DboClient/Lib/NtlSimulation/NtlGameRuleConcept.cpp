#include "precomp_ntlsimulation.h"
#include "NtlGameRuleConcept.h"
#include <algorithm>
#include "NtlDebug.h"
#include "NtlWorldConcept.h"

// share
#include "NtlResultCode.h"

// simulation
#include "NtlSLGlobal.h"
#include "NtlSobAvatar.h"
#include "NtlSLEventFunc.h"

// shared
#include "NtlBudokai.h"


#define RULE_TABLE_MAKE( p ) m_defRuleTransTable[p] = vecdef_RuleList();
#define RULE_TABLE_REGIST( p1, p2 ) m_defRuleTransTable[p1].push_back( p2 );
#define RULE_QUERY_TABLE_REGIST( p1, p2 ) m_defMainRuleQueryTable[p1] = p2;


CNtlGameRuleConcept* CNtlGameRuleConcept::m_pInstance = NULL;


CNtlGameRuleConcept* CNtlGameRuleConcept::GetInstance( void )
{
	return m_pInstance;
}


CNtlGameRuleConcept::CNtlGameRuleConcept( void )
{
	m_pInstance = this;
}


CNtlGameRuleConcept::~CNtlGameRuleConcept( void )
{
	m_pInstance = NULL;
}


RwBool CNtlGameRuleConcept::Create( void )
{
	MakeRuleTransTable();
	MakeMainRuleQueryTable();

	return TRUE;
}


void CNtlGameRuleConcept::Destroy( void )
{
}


RwBool CNtlGameRuleConcept::CanTransition( eGAME_RULE_TYPE eNextRuleType )
{
	eGAME_RULE_TYPE eCurRuleType = GetCurRuleType();

	mapdef_RuleTransTable::iterator itCurrent = m_defRuleTransTable.find( eCurRuleType );
	if ( itCurrent == m_defRuleTransTable.end() )
	{
		OutputMessage( eCurRuleType, eNextRuleType );
		return FALSE;
	}

	vecdef_RuleList& RuleList = itCurrent->second;
	if ( RuleList.end() == std::find( RuleList.begin(), RuleList.end(), eNextRuleType ) )
	{
		OutputMessage( eCurRuleType, eNextRuleType );
		return FALSE;
	}

	return TRUE;
}


void CNtlGameRuleConcept::MakeRuleTransTable( void )
{
	m_defRuleTransTable.clear();

	// 일반 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_NORMAL );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_NORMAL );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_TMQ_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_TMQ_RUN );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_MAIN_DRAGONBALL );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_SUB_FREEPVP );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_NORMAL, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 개인 상점 개설 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_NORMAL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_TMQ_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_TMQ_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_MAIN_DRAGONBALL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_SUB_FREEPVP );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 개인 상점 판매 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_NORMAL );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_TMQ_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_TMQ_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_MAIN_DRAGONBALL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_SUB_FREEPVP );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 타이머신 퀘스트 진입 신청 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY, GAME_RULE_TYPE_MAIN_NORMAL );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY, GAME_RULE_TYPE_MAIN_TMQ_READY );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY, GAME_RULE_TYPE_SUB_FREEPVP );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 타이머신 퀘스트 진입 대기 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_TMQ_READY );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_READY, GAME_RULE_TYPE_MAIN_NORMAL );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_READY, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_READY, GAME_RULE_TYPE_MAIN_TMQ_RUN );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_READY, GAME_RULE_TYPE_SUB_FREEPVP );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_READY, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 타이머신 퀘스트 진행 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_TMQ_RUN );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_RUN, GAME_RULE_TYPE_MAIN_NORMAL );
	}

	// 랭크배틀 진입 신청 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_NORMAL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_TMQ_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_TMQ_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_MAIN_DRAGONBALL );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_SUB_FREEPVP );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 랭크배틀 진행 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_NORMAL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_TMQ_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_TMQ_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_MAIN_DRAGONBALL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_SUB_FREEPVP );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 천하제일 무도회 진입 신청 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_NORMAL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_TMQ_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_TMQ_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_MAIN_DRAGONBALL );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_SUB_FREEPVP );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 천하제일 무도회 진행 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_NORMAL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_TMQ_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_TMQ_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_MAIN_DRAGONBALL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_SUB_FREEPVP );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 드래곤볼 신청 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_MAIN_DRAGONBALL );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_NORMAL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TMQ_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TMQ_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_DRAGONBALL );
//		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_SUB_FREEPVP );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// FREEPVP 상태에서 전이 가능한 상태
	RULE_TABLE_MAKE( GAME_RULE_TYPE_SUB_FREEPVP );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_NORMAL );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TMQ_READY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TMQ_RUN );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_DRAGONBALL );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_SUB_FREEPVP );
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}

	// 성복 선배 여기 추가요
	RULE_TABLE_MAKE( GAME_RULE_TYPE_SUB_PARTY_INVITE );
	{
		RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_NORMAL );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TMQ_READY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TMQ_RUN );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_RANKBATTLE_READY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_MAIN_DRAGONBALL );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_SUB_FREEPVP );
		//RULE_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, GAME_RULE_TYPE_SUB_PARTY_INVITE );
	}
}


void CNtlGameRuleConcept::MakeMainRuleQueryTable( void )
{
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY, &CNtlGameRuleConcept::Is_Main_PrivateShopReady );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN, &CNtlGameRuleConcept::Is_Main_PrivateShopRun );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY, &CNtlGameRuleConcept::Is_Main_TMQ_Wait_Lottery );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_READY, &CNtlGameRuleConcept::Is_Main_TMQReady );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TMQ_RUN, &CNtlGameRuleConcept::Is_Main_TMQRun );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_READY, &CNtlGameRuleConcept::Is_Main_RankBattleReady );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN, &CNtlGameRuleConcept::Is_Main_RankBattleRun );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY, &CNtlGameRuleConcept::Is_Main_TenkaichibudokaiReady );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN, &CNtlGameRuleConcept::Is_Main_TenkaichibudokaiRun );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_MAIN_DRAGONBALL, &CNtlGameRuleConcept::Is_Main_DragonBall );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_SUB_FREEPVP, &CNtlGameRuleConcept::Is_Sub_FreePvP );
	RULE_QUERY_TABLE_REGIST( GAME_RULE_TYPE_SUB_PARTY_INVITE, &CNtlGameRuleConcept::Is_Sub_PartyInvite );
}


eGAME_RULE_TYPE CNtlGameRuleConcept::GetCurRuleType( void )
{
	eGAME_RULE_TYPE eGameRuleType = GAME_RULE_TYPE_MAIN_NORMAL;

	mapdef_RuleQueryTable::iterator it = m_defMainRuleQueryTable.begin();
	for ( ; it != m_defMainRuleQueryTable.end(); ++it )
	{
		if ( (this->*(it->second))() )
		{
			if ( GAME_RULE_TYPE_MAIN_NORMAL == eGameRuleType )
			{
				eGameRuleType = it->first;
			}
			else
			{
				NTL_ASSERTFAIL( "Must be GAME_RULE_TYPE_MAIN_NORMAL == eGameRuleType\n" );
			}
		}
	}

	return eGameRuleType;
}

/**
* \brief 개인상점 준비중 상태인가?
* \return 준비중이라면 TRUE, 아니라면 FALSE
*/
RwBool CNtlGameRuleConcept::Is_Main_PrivateShopReady( void )
{
	// 현재 플레이 하는 아바타를 가지고 와서 그 아바타의 개인상점 상태를 측정한다.
	CNtlSobAvatar* pSobAvatar = GetNtlSLGlobal()->GetSobAvatar();
	if ( NULL == pSobAvatar )
	{
		return FALSE;
	}

	CNtlPrivateShop* pPrivateShop = pSobAvatar->GetPrivateShop(); 
	if ( NULL == pPrivateShop )
	{
		return FALSE;
	}

	// 개인상점의 상태
	switch( pPrivateShop->GetPrivateShopState() )
	{
	case PRIVATESHOP_STATE_CLOSE:			// 준비 상태
	case PRIVATESHOP_STATE_DATALOADING:		// Data Loading(최초 생성)
		return TRUE;

	default:						// 그 외 모두 다 준비상태가 아니다.
		break;
	}

	return FALSE;
}

/**
* \brief 개인상점 판매중 상태인가?
* \return 판매중이라면 TRUE, 아니라면 FALSE
*/
RwBool CNtlGameRuleConcept::Is_Main_PrivateShopRun( void )
{
	// 현재 플레이 하는 아바타를 가지고 와서 그 아바타의 개인상점 상태를 측정한다.
	CNtlSobAvatar* pSobAvatar = GetNtlSLGlobal()->GetSobAvatar();
	if ( NULL == pSobAvatar )
	{
		return FALSE;
	}

	CNtlPrivateShop* pPrivateShop = pSobAvatar->GetPrivateShop(); 
	if ( NULL == pPrivateShop )
	{
		return FALSE;
	}

	// 개인상점은 판매중, 흥정 대기, 흥정 모두 다 판매 상태이다.
	switch( pPrivateShop->GetPrivateShopState() )
	{
	case PRIVATESHOP_STATE_OPEN:			// 판매중
	case PRIVATESHOP_STATE_BUSINESS_WAIT:	// 흥정 대기
	case PRIVATESHOP_STATE_BUSINESS:		// 흥정 중
		return TRUE;

	default:
		break;
	}
	
	return FALSE;
}

RwBool CNtlGameRuleConcept::Is_Main_TMQ_Wait_Lottery( void )
{
	CNtlTMQ* pTMQ = GetNtlSLGlobal()->GetSobAvatar()->GetTMQ();
	if ( NULL == pTMQ )
	{
		return FALSE;
	}

	sTIMEQUEST_ROOM_JOIN_INFO* pTMQRoomInfo = pTMQ->GetRoom();
	if ( NULL == pTMQRoomInfo )
	{
		return FALSE;
	}

	if( pTMQRoomInfo->byRoomState == TIMEQUEST_ROOM_STATE_REGISTRAITION )
		return TRUE;

	return FALSE;
}

RwBool CNtlGameRuleConcept::Is_Main_TMQReady( void )
{
	CNtlTMQ* pTMQ = GetNtlSLGlobal()->GetSobAvatar()->GetTMQ();
	if ( NULL == pTMQ )
	{
		return NULL;
	}

	sTIMEQUEST_ROOM_JOIN_INFO* pTMQRoomInfo = pTMQ->GetRoom();
	if ( NULL == pTMQRoomInfo )
	{
		return NULL;
	}

	if( pTMQRoomInfo->byRoomState == TIMEQUEST_ROOM_STATE_WAITENTRY )
		return TRUE;

	return FALSE;
}


RwBool CNtlGameRuleConcept::Is_Main_TMQRun( void )
{
	if(GetNtlWorldConcept()->GetWorldConceptController(WORLD_PLAY_TIME_MACHINE))
		return TRUE;

	return FALSE;
}


RwBool CNtlGameRuleConcept::Is_Main_RankBattleReady( void )
{
	if( GetNtlWorldConcept()->GetWorldConceptController( WORLD_PLAY_RANK_BATTLE ) )
		return FALSE;

	CNtlRankBattle* pRankBattle = GetNtlSLGlobal()->GetSobAvatar()->GetRankBattle();
	
	if( pRankBattle->GetRBRequestState() != CNtlRankBattle::RB_REQUEST_STATE_NONE )
		return TRUE;

	return FALSE;
}


RwBool CNtlGameRuleConcept::Is_Main_RankBattleRun( void )
{
	if( GetNtlWorldConcept()->GetWorldConceptController( WORLD_PLAY_RANK_BATTLE ) )
		return TRUE;

	return FALSE;
}


RwBool CNtlGameRuleConcept::Is_Main_TenkaichibudokaiReady( void )
{
	if( GetNtlWorldConcept()->GetWorldConceptController( WORLD_PLAY_T_BUDOKAI ) )
		return FALSE;

	CNtlTBudokai* pTBudokai = GetNtlSLGlobal()->GetSobAvatar()->GetTenkaichiBudokai();

	if( pTBudokai->GetBudokaiJoinInfo()->byJoinState == BUDOKAI_JOIN_STATE_PLAY )
		return TRUE;
	
	return FALSE;
}


RwBool CNtlGameRuleConcept::Is_Main_TenkaichibudokaiRun( void )
{
	if( GetNtlWorldConcept()->GetWorldConceptController( WORLD_PLAY_T_BUDOKAI ) )
		return TRUE;

	return FALSE;
}


RwBool CNtlGameRuleConcept::Is_Main_DragonBall( void )
{
    if(GetNtlWorldConcept()->GetWorldConceptController(WORLD_PLAY_DRAGONBALL_COLLECT))
        return TRUE;

	return FALSE;
}

RwBool CNtlGameRuleConcept::Is_Sub_FreePvP( void )
{
	if(GetNtlWorldConcept()->GetWorldConceptController(WORLD_PLAY_FREEPVP))
		return TRUE;

	return FALSE;
}

RwBool CNtlGameRuleConcept::Is_Sub_PartyInvite( void )
{
	// 성복 선배 여기 추가요

	return FALSE;
}

void CNtlGameRuleConcept::OutputMessage( eGAME_RULE_TYPE eCurRuleType, eGAME_RULE_TYPE eNextRuleType )
{
	switch ( eCurRuleType )
	{
	case GAME_RULE_TYPE_MAIN_PRIVATESHOP_READY:			// 개인 상점 개설
	case GAME_RULE_TYPE_MAIN_PRIVATESHOP_RUN:			// 개인 상점 판매
		{
			if ( eCurRuleType == eNextRuleType )
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_ALREADY_OPENED_PRIVATE_SHOP);
			}
			else
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_CANT_PLAY_IN_PRIVATE_SHOP);
			}
		}
		break;
	case GAME_RULE_TYPE_MAIN_TMQ_WAIT_LOTTERY:			// 타이머신 신청
	case GAME_RULE_TYPE_MAIN_TMQ_READY:					// 타이머신 진입 대기
	case GAME_RULE_TYPE_MAIN_TMQ_RUN:					// 타이머신 퀘스트 진행
		{
			if ( eCurRuleType == eNextRuleType )
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_ALREADY_JOINED_IN_TMQ);
			}
			else
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_CANT_PLAY_IN_TMQ);
			}
		}
		break;
	case GAME_RULE_TYPE_MAIN_RANKBATTLE_READY:			// 랭크배틀 진입 신청
	case GAME_RULE_TYPE_MAIN_RANKBATTLE_RUN:			// 랭크배틀 진행
		{
			if ( eCurRuleType == eNextRuleType )
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_ALREADY_JOINED_IN_RANKBATTLE);
			}
			else
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_CANT_PLAY_IN_RANKBATTLE);
			}
		}
		break;
	case GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_READY:	// 천하제일 무도회 진입 신청
	case GAME_RULE_TYPE_MAIN_TENKAICHIBUDOKAI_RUN:		// 천하제일 무도회 진행
		{
			if ( eCurRuleType == eNextRuleType )
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_ALREADY_JOINED_BUDOKAI);
			}
			else
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_CANT_PLAY_IN_BUDOKAI);
			}
		}
		break;
	case GAME_RULE_TYPE_MAIN_DRAGONBALL:				// 드래곤볼 진행
		{
			if ( eCurRuleType == eNextRuleType )
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_ALREADY_SUMMON_DRAGONBALL);
			}
			else
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_CANT_PLAY_IN_SUMMON_DRAGONBALL);
			}
		}
		break;
	case GAME_RULE_TYPE_SUB_FREEPVP:		// FreeBattle 
		{
			if( eCurRuleType == eNextRuleType )
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_ALREADY_JOINED_IN_FREEBATTLE);
			}
			else
			{
				CNtlSLEventGenerator::SysMsg(INVALID_SERIAL_ID, GAME_GAMERULE_REG_CANT_PLAY_IN_FREEBATTLE);
			}
		}
		break;
		// 성복 선배 여기 추가요.
	case GAME_RULE_TYPE_SUB_PARTY_INVITE:
		{
		}
		break;
	}
}